{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SAEvCF,EAAQG,iBAAiB,UAmCzB,SAAkBC,GAChBA,EAAEC,iBA5BJ,WACE,IAAK,MAAMC,KAAOC,EAChBA,EAAWD,GAAOE,OAAOR,EAAQM,GAAKG,M,CA4BxCC,GAvBF,WACE,IAAIC,EAAQJ,EAAWK,MAGvB,IAAK,IAAIC,EAAW,EAAGA,GAAYN,EAAWO,OAAQD,GAAY,EAGhEE,EAAcF,EAAUF,GAAOK,MAAK,EAACC,SAAEA,EAAQL,MAAEA,MAC/CM,EAAApB,GAASqB,OAAOC,QAAQ,uBAAqBH,QAAiBL,MAAU,IAGvES,OAAM,EAACJ,SAAEA,EAAQL,MAAEA,MACpBM,EAAApB,GAASqB,OAAOG,QAAQ,sBAAoBL,QAAiBL,MAAU,IAIzED,GAASJ,EAAWgB,I,CAQtBC,E,IArCF,MAAMjB,EAAa,CACjBK,MAAO,EACPW,KAAM,EACNT,OAAQ,GAqCV,SAASC,EAAcE,EAAUL,GAE/B,OAAO,IAAIa,SAAQ,CAACC,EAASC,KAE7B,MAAMC,EAAgBC,KAAKC,SAAW,GAEpCC,YAAW,KACJH,EACLF,EAAQ,C,SAAET,E,MAAUL,IAEpBe,EAAO,C,SAAEV,E,MAAUL,GAAQ,GAG1BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formRef = document.querySelector(\".form\");\n\nformRef.addEventListener(\"submit\", onSubmit);\n\nconst valueInput = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n};\n\nfunction getValueInput() {\n  for (const key in valueInput) {\n    valueInput[key] = Number(formRef[key].value);\n  }\n  // console.log(valueInput);\n}\n\nfunction getPromise() {\n  let delay = valueInput.delay;\n  // console.log(delay);\n\n  for (let position = 1; position <= valueInput.amount; position += 1) {\n    // console.log(position);\n\n    createPromise(position, delay).then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    \n    delay += valueInput.step;\n  }\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  getValueInput();\n  getPromise();\n}\n\nfunction createPromise(position, delay) {\n\n  return new Promise((fulfill, reject) => {\n\n  const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n       if (shouldResolve) {\n      fulfill({ position, delay })\n       } else {\n      reject({ position, delay })\n    }\n      \n    }, delay);\n   \n  })\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","addEventListener","e","preventDefault","key","$47d4ff9957288465$var$valueInput","Number","value","$47d4ff9957288465$var$getValueInput","delay1","delay","position1","amount","$47d4ff9957288465$var$createPromise","then","position","$parcel$interopDefault","Notify","success","catch","failure","step","$47d4ff9957288465$var$getPromise","Promise","fulfill","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.437eb6ca.js.map"}